        -:    0:Source:/home/nikolas/Programming/repos/im-c/tests/ui/test_ui_components.c
        -:    0:Graph:build/CMakeFiles/test_ui_components.dir/ui/test_ui_components.c.gcno
        -:    0:Data:build/CMakeFiles/test_ui_components.dir/ui/test_ui_components.c.gcda
        -:    0:Runs:1
        -:    1:#include "unity.h"
        -:    2:#include <stdbool.h>
        -:    3:#include <string.h>
        -:    4:#include <stdint.h>
        -:    5:
        -:    6:// Mock structures for UI testing
        -:    7:typedef struct {
        -:    8:    float x, y, width, height;
        -:    9:} BoundingBox;
        -:   10:
        -:   11:// Test helper functions
        7:   12:bool isPointInBoundingBox(float x, float y, BoundingBox box) {
        6:   13:    return x >= box.x && x <= box.x + box.width &&
       13:   14:           y >= box.y && y <= box.y + box.height;
        -:   15:}
        -:   16:
        4:   17:void handleTextInput(char* buffer, size_t* len, size_t maxLen, char inputChar) {
       4*:   18:    if (!buffer || !len) return;
        -:   19:    
        4:   20:    if (*len < maxLen - 1) {
        3:   21:        buffer[*len] = inputChar;
        3:   22:        (*len)++;
        3:   23:        buffer[*len] = '\0';
        -:   24:    }
        -:   25:}
        -:   26:
        2:   27:void handleBackspace(char* buffer, size_t* len) {
       2*:   28:    if (!buffer || !len) return;
        -:   29:    
        2:   30:    if (*len > 0) {
        1:   31:        (*len)--;
        1:   32:        buffer[*len] = '\0';
        -:   33:    }
        -:   34:}
        -:   35:
        6:   36:void setUp(void) {
        6:   37:}
        -:   38:
        6:   39:void tearDown(void) {
        6:   40:}
        -:   41:
        1:   42:void test_isPointInBoundingBox_inside(void) {
        1:   43:    BoundingBox box = {10.0f, 10.0f, 100.0f, 50.0f};
        -:   44:    
       1*:   45:    TEST_ASSERT_TRUE(isPointInBoundingBox(50.0f, 30.0f, box));
       1*:   46:    TEST_ASSERT_TRUE(isPointInBoundingBox(10.0f, 10.0f, box));
       1*:   47:    TEST_ASSERT_TRUE(isPointInBoundingBox(110.0f, 60.0f, box));
        1:   48:}
        -:   49:
        1:   50:void test_isPointInBoundingBox_outside(void) {
        1:   51:    BoundingBox box = {10.0f, 10.0f, 100.0f, 50.0f};
        -:   52:    
       1*:   53:    TEST_ASSERT_FALSE(isPointInBoundingBox(5.0f, 30.0f, box));
       1*:   54:    TEST_ASSERT_FALSE(isPointInBoundingBox(50.0f, 5.0f, box));
       1*:   55:    TEST_ASSERT_FALSE(isPointInBoundingBox(115.0f, 30.0f, box));
       1*:   56:    TEST_ASSERT_FALSE(isPointInBoundingBox(50.0f, 65.0f, box));
        1:   57:}
        -:   58:
        1:   59:void test_handleTextInput_normal(void) {
        1:   60:    size_t len = 0;
        1:   61:    char buffer[10] = "";
        -:   62:    
        1:   63:    handleTextInput(buffer, &len, 10, 'H');
        1:   64:    handleTextInput(buffer, &len, 10, 'i');
        -:   65:    
        1:   66:    TEST_ASSERT_EQUAL_STRING("Hi", buffer);
        1:   67:    TEST_ASSERT_EQUAL_INT(2, len);
        1:   68:}
        -:   69:
        1:   70:void test_handleTextInput_buffer_full(void) {
        1:   71:    size_t len = 3;
        1:   72:    char buffer[5] = "abc";
        -:   73:    
        1:   74:    handleTextInput(buffer, &len, 5, 'd');
        1:   75:    handleTextInput(buffer, &len, 5, 'e'); // Should be ignored
        -:   76:    
        1:   77:    TEST_ASSERT_EQUAL_STRING("abcd", buffer);
        1:   78:    TEST_ASSERT_EQUAL_INT(4, len);
        1:   79:}
        -:   80:
        1:   81:void test_handleBackspace_normal(void) {
        1:   82:    size_t len = 5;
        1:   83:    char buffer[10] = "Hello";
        -:   84:    
        1:   85:    handleBackspace(buffer, &len);
        -:   86:    
        1:   87:    TEST_ASSERT_EQUAL_STRING("Hell", buffer);
        1:   88:    TEST_ASSERT_EQUAL_INT(4, len);
        1:   89:}
        -:   90:
        1:   91:void test_handleBackspace_empty_buffer(void) {
        1:   92:    size_t len = 0;
        1:   93:    char buffer[10] = "";
        -:   94:    
        1:   95:    handleBackspace(buffer, &len);
        -:   96:    
        1:   97:    TEST_ASSERT_EQUAL_STRING("", buffer);
        1:   98:    TEST_ASSERT_EQUAL_INT(0, len);
        1:   99:}
        -:  100:
        1:  101:int main(void) {
        1:  102:    UNITY_BEGIN();
        -:  103:    
        1:  104:    RUN_TEST(test_isPointInBoundingBox_inside);
        1:  105:    RUN_TEST(test_isPointInBoundingBox_outside);
        1:  106:    RUN_TEST(test_handleTextInput_normal);
        1:  107:    RUN_TEST(test_handleTextInput_buffer_full);
        1:  108:    RUN_TEST(test_handleBackspace_normal);
        1:  109:    RUN_TEST(test_handleBackspace_empty_buffer);
        -:  110:    
        1:  111:    return UNITY_END();
        -:  112:}
